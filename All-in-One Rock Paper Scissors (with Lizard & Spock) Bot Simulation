{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "14262b24-a6ea-4fac-a000-4ea8a62ff526",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[('Paper', 'Paper'), ('Rock', 'Rock'), ('Rock', 'Paper'), ('Lizard', 'Paper'), ('Scissors', 'Scissors')]\n"
     ]
    }
   ],
   "source": [
    "#Task 1\n - Generate a list of random games",
    "import random\n",
    "from collections import Counter\n",
    "\n",
    "shapes = ['Rock', 'Paper', 'Scissors', 'Lizard', 'Spock']\n",
    "Winning_Rules = {\n",
    "        ('Scissors', 'Paper'): 'Scissors', ('Paper', 'Rock'): 'Paper', ('Rock', 'Lizard'): 'Rock',\n",
    "        ('Lizard', 'Spock'): 'Lizard', ('Scissors', 'Spock'): 'Spock',('Scissors', 'Lizard'): 'Scissors',\n",
    "        ('Lizard', 'Paper'): 'Lizard',('Paper', 'Spock'): 'Paper',('Spock', 'Rock'): 'Spock',\n",
    "        ('Rock', 'Scissors'): 'Rock'\n",
    "}  \n",
    "shape_Score = {'Rock': 1, 'Paper': 2, 'Scissors': 1, 'Lizard': 2, 'Spock': 1}\n",
    "\n",
    "def generate_game(n_rounds):\n",
    "    return [(random.choice(shapes), random.choice(shapes)) for _ in range(n_rounds)]\n",
    "\n",
    "Task1 = generate_game(5)\n",
    "print (Task1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "57dea4ce",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    }
   ],
   "source": [
    "#Task 2\n - Generate a list of random games",
    "def score(game):\n",
    "    player1_score, player2_score = 0, 0\n",
    "    for p1, p2 in game:\n",
    "        player1_score += shape_Score[p1]\n",
    "        player2_score += shape_Score[p2]\n",
    "\n",
    "        if p1 == p2:\n",
    "            player1_score += 3\n",
    "            player2_score += 3\n",
    "        elif (p1, p2) in Winning_Rules:\n",
    "            player1_score += 5\n",
    "        else:\n",
    "            player2_score += 5\n",
    "    return (player1_score< player2_score)\n",
    "\n",
    "Task2 = score(Task1)\n",
    "print (Task2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "691265ee-373c-4071-9b90-fbea3c33fb20",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('Rock', 'Paper')\n"
     ]
    }
   ],
   "source": [
    "#Task 3\n - Generate a list of random games",
    "def most_played_shape(game):\n",
    "    p1_moves = [p1 for p1, _ in game]\n",
    "    p2_moves = [p2 for _, p2 in game]\n",
    "\n",
    "    most_p1 = Counter(p1_moves).most_common(1)[0][0]\n",
    "    most_p2 = Counter(p2_moves).most_common(1)[0][0]\n",
    "\n",
    "    return (most_p1, most_p2)\n",
    "\n",
    "Task3 = most_played_shape(Task1)\n",
    "print (Task3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "85ea62bb-347e-414c-97aa-fca5e45cced0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('P', 'a', 'e', 'p', 'r')\n"
     ]
    }
   ],
   "source": [
    "#Task 4\n - Find most common shape pair across games",
    "def most_played_pair(games):\n",
    "    pair_counter = Counter()\n",
    "\n",
    "    for game in games:\n",
    "        for round in game:\n",
    "            pair = tuple(sorted(round))\n",
    "            pair_counter[pair] += 1\n",
    "    return pair_counter.most_common(1)[0][0]\n",
    "\n",
    "Task4 = most_played_pair(Task1)\n",
    "print (Task4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "27113a45-8cca-4a70-ae03-4363c613d5d4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "None\n"
     ]
    }
   ],
   "source": [
    "#Task 5\n - Find most common shape pair across games",
    "from collections import Counter\n",
    "Winning_Rules = {\n",
    "        ('Scissors', 'Paper'): 'Scissors', ('Paper', 'Rock'): 'Paper', ('Rock', 'Lizard'): 'Rock',\n",
    "        ('Lizard', 'Spock'): 'Lizard', ('Scissors', 'Spock'): 'Spock',('Scissors', 'Lizard'): 'Scissors',\n",
    "        ('Lizard', 'Paper'): 'Lizard',('Paper', 'Spock'): 'Paper',('Spock', 'Rock'): 'Spock',\n",
    "        ('Rock', 'Scissors'): 'Rock'\n",
    "}  \n",
    "\n",
    "def winning_shape(games):\n",
    "    win_counter = Counter()\n",
    "\n",
    "    for game in games:\n",
    "        for round in game:\n",
    "            if len(round) == 2:\n",
    "                p1, p2 = round\n",
    "                if p1 != p2:\n",
    "                    winner = Winning_Rules.get((p1, p2), p2)\n",
    "                    win_counter[winner] +=1\n",
    "                    \n",
    "    max_wins = max(win_counter.values(), default=0)\n",
    "    most_winning_shapes = [(shape, count) for shape, count in win_counter.items() if count == max_wins]\n",
    "\n",
    "    if most_winning_shapes:\n",
    "        return most_winning_shapes if len(most_winning_shapes) > 1 else most_winning_shapes[0]\n",
    "    else:\n",
    "        return None\n",
    "\n",
    "\n",
    "Task5 = winning_shape(Task1)\n",
    "print (Task5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a3462f9e-1d33-47c6-990a-a081e1844734",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(21, 22)\n"
     ]
    }
   ],
   "source": [
    "#Task 6\n - Find most common shape pair across games",
    "def bonus_score(game):\n",
    "    player1_score, player2_score = 0, 0\n",
    "    p1_streak, p2_streak = 0, 0\n",
    "\n",
    "    for p1, p2 in game:\n",
    "        player1_score += shape_Score[p1]\n",
    "        player2_score += shape_Score[p2]\n",
    "\n",
    "        if p1 == p2:\n",
    "            player1_score += 3\n",
    "            player2_score += 3\n",
    "            p1_streak, p2_streak = 0, 0\n",
    "        elif (p1, p2) in Winning_Rules:\n",
    "            player1_score += 5\n",
    "            p1_streak += 1\n",
    "            p2_streak = 0\n",
    "        else:\n",
    "            player2_score += 5\n",
    "            p2_streak += 1\n",
    "            p1_streak = 0\n",
    "\n",
    "        if p1_streak == 3:\n",
    "            player1_score += 10\n",
    "            p1_streak = 0\n",
    "    \n",
    "        if p2_streak == 3:\n",
    "            player2_score += 10\n",
    "            p2_streak = 0\n",
    "\n",
    "    return (player1_score, player2_score)\n",
    "    \n",
    "Task6 = bonus_score(Task1)\n",
    "print (Task6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6b319251-16a1-4950-b6c4-5507b1c5d16f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
